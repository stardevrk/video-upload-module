var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var VideoUploadOriginal = /** @class */ (function (_super) {
    __extends(VideoUploadOriginal, _super);
    function VideoUploadOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoUploadOriginal.prototype.init = function (uploadOptions) { return cordova(this, "init", { "sync": true }, arguments); };
    VideoUploadOriginal.prototype.startUpload = function (pluginType) { return cordova(this, "startUpload", {}, arguments); };
    VideoUploadOriginal.prototype.initLive = function (options) { return cordova(this, "initLive", { "sync": true }, arguments); };
    VideoUploadOriginal.prototype.startBroadcast = function (rtmpEndpoint) { return cordova(this, "startBroadcast", { "sync": true }, arguments); };
    VideoUploadOriginal.pluginName = "VideoUpload";
    VideoUploadOriginal.plugin = "https://github.com/stardevrk/cordova-plugin-video-upload-aws.git";
    VideoUploadOriginal.pluginRef = "VideoUpload";
    VideoUploadOriginal.repo = "https://github.com/stardevrk/cordova-plugin-video-upload-aws";
    VideoUploadOriginal.platforms = ["iOS"];
    return VideoUploadOriginal;
}(IonicNativePlugin));
var VideoUpload = new VideoUploadOriginal();
export { VideoUpload };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3ZpZGVvLXVwbG9hZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBWUEsT0FBTyw4QkFBMEYsTUFBTSxvQkFBb0IsQ0FBQzs7SUF1RTNGLCtCQUFpQjs7OztJQU9oRCwwQkFBSSxhQUFDLGFBQTRCO0lBUWpDLGlDQUFXLGFBQUMsVUFBa0I7SUFTOUIsOEJBQVEsYUFBQyxPQUFvQjtJQU83QixvQ0FBYyxhQUFDLFlBQW9COzs7Ozs7c0JBbEhyQztFQW1GaUMsaUJBQWlCO1NBQXJDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgaXMgYSB0ZW1wbGF0ZSBmb3IgbmV3IHBsdWdpbiB3cmFwcGVyc1xuICpcbiAqIFRPRE86XG4gKiAtIEFkZC9DaGFuZ2UgaW5mb3JtYXRpb24gYmVsb3dcbiAqIC0gRG9jdW1lbnQgdXNhZ2UgKGltcG9ydGluZywgZXhlY3V0aW5nIG1haW4gZnVuY3Rpb25hbGl0eSlcbiAqIC0gUmVtb3ZlIGFueSBpbXBvcnRzIHRoYXQgeW91IGFyZSBub3QgdXNpbmdcbiAqIC0gUmVtb3ZlIGFsbCB0aGUgY29tbWVudHMgaW5jbHVkZWQgaW4gdGhpcyB0ZW1wbGF0ZSwgRVhDRVBUIHRoZSBAUGx1Z2luIHdyYXBwZXIgZG9jcyBhbmQgYW55IG90aGVyIGRvY3MgeW91IGFkZGVkXG4gKiAtIFJlbW92ZSB0aGlzIG5vdGVcbiAqXG4gKi9cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQ29yZG92YVByb3BlcnR5LCBDb3Jkb3ZhSW5zdGFuY2UsIEluc3RhbmNlUHJvcGVydHksIElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBPcHRpb25zIGZvciB0aGUgdmlkZW8gcmVjb3JkaW5nICYgdXBsb2FkIGZlYXR1cmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXBsb2FkT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBV1MgQ29nbml0byBQb29sIElEXG4gICAqL1xuICBwb29sSUQ6IHN0cmluZyxcbiAgLyoqXG4gICAqIEFXUyBidWNrZXQgYW5kIGNvZ25pdG8gcG9vbCBpZCByZWdpb24uIHRoZXkgc2hvdWxkIGJlIHNhbWUuXG4gICAqL1xuICByZWdpb246IHN0cmluZyxcbiAgLyoqXG4gICAqIEFXUyBidWNrZXQgbmFtZSB3aGVyZSB2aWRlbyBpcyB1cGxvYWRlZCB0by5cbiAgICovXG4gIGJ1Y2tldDogc3RyaW5nLFxuICAvKipcbiAgICogRm9sZGVyIG5hbWUgaW4gdGhlIEFXUyBidWNrZXQuXG4gICAqL1xuICBmb2xkZXI6IHN0cmluZyxcbiAgLyoqXG4gICAqIGNhbWVyYSBwcmV2aWV3IG9wdGlvbnMgLSB3aWR0aCwgaGVpZ2h0LlxuICAgKi9cbiAgY2FtZXJhV2lkdGg6IG51bWJlcixcbiAgY2FtZXJhSGVpZ2h0OiBudW1iZXJcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciB0aGUgbGl2ZSBzdHJlYW1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaXZlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBjYW1lcmEgcHJldmlldyBvcHRpb25zIC0gd2lkdGgsIGhlaWdodC5cbiAgICovXG4gIGNhbWVyYVdpZHRoOiBudW1iZXIsXG4gIGNhbWVyYUhlaWdodDogbnVtYmVyXG59XG5cbi8qKlxuICogQG5hbWUgVmlkZW8gVXBsb2FkXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgQ29yZG92YSBwbHVnaW4gdGhhdCBzaW1wbHkgYWxsb3dzIHlvdSB0byByZWNvcmQgYW5kIHVwbG9hZCBhIHZpZGVvIHRvIHlvdXIgQVdTIGJ1Y2tldC5cbiAqIEFuZCB0aGlzIHBsdWdpbiB3b3JrcyBhcyBhIGxpdmUgc3RyZWFtIGJyb2FkY2FzdGVyIHRvIHlvdXIgcnRtcCBlbmQgcG9pbnQuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBWaWRlb1VwbG9hZCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvdmlkZW8tdXBsb2FkJztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB2aWRlb1VwbG9hZDogVmlkZW9VcGxvYWQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLnZpZGVvVXBsb2FkLmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnVmlkZW9VcGxvYWQnLFxuICBwbHVnaW46ICdodHRwczovL2dpdGh1Yi5jb20vc3RhcmRldnJrL2NvcmRvdmEtcGx1Z2luLXZpZGVvLXVwbG9hZC1hd3MuZ2l0JywgLy8gbnBtIHBhY2thZ2UgbmFtZSwgZXhhbXBsZTogY29yZG92YS1wbHVnaW4tY2FtZXJhXG4gIHBsdWdpblJlZjogJ1ZpZGVvVXBsb2FkJywgLy8gdGhlIHZhcmlhYmxlIHJlZmVyZW5jZSB0byBjYWxsIHRoZSBwbHVnaW4sIGV4YW1wbGU6IG5hdmlnYXRvci5nZW9sb2NhdGlvblxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3N0YXJkZXZyay9jb3Jkb3ZhLXBsdWdpbi12aWRlby11cGxvYWQtYXdzJywgLy8gdGhlIGdpdGh1YiByZXBvc2l0b3J5IFVSTCBmb3IgdGhlIHBsdWdpblxuICBwbGF0Zm9ybXM6IFsnaU9TJ10gLy8gQXJyYXkgb2YgcGxhdGZvcm1zIHN1cHBvcnRlZCwgZXhhbXBsZTogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFZpZGVvVXBsb2FkIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBwbHVnaW4gd2l0aCB0aGUgdXBsb2FkIGZlYXR1cmVcbiAgICogQHBhcmFtIHVwbG9hZE9wdGlvbnMge1VwbG9hZE9wdGlvbnN9IFZpZGVvIFVwbG9hZCBQbHVnaW4gZmVhdHVyZSBzZXR0aW5nIG9wdGlvbnMuIEFsbCBhcmUgcmVxdWlyZWQuXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgaW5pdCh1cGxvYWRPcHRpb25zOiBVcGxvYWRPcHRpb25zKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBTdGFydCB0aGUgdmlkZW8gdXBsb2FkIHBsdWdpblxuICAgKiBAcGFyYW0gcGx1Z2luVHlwZSB7c3RyaW5nfSBWaWRlbyBVcGxvYWQgUGx1Z2luIGZlYXR1cmUgc2V0dGluZyBvcHRpb25zLiBBbGwgYXJlIHJlcXVpcmVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBzb21ldGhpbmcgaGFwcGVuc1xuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydFVwbG9hZChwbHVnaW5UeXBlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgbGl2ZSBzdHJlYW0gcGx1Z2luXG4gICAqIEBwYXJhbSBvcHRpb25zIHtMaXZlT3B0aW9uc30gbGl2ZSBzdHJlYW0gYnJvYWRjYXN0ZXIgZmVhdHVyZSBjYW1lcmEgcHJldmlldyBvcHRpb25zLiBBbGwgYXJlIHJlcXVpcmVkLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGluaXRMaXZlKG9wdGlvbnM6IExpdmVPcHRpb25zKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBTdGFydCBsaXZlIHN0cmVhbSBwbHVnaW5cbiAgICogQHBhcmFtIHJ0bXBFbmRwb2ludCB7c3RyaW5nfSBsaXZlIHN0cmVhbSBlbmRwb2ludCB0aGF0IHlvdSB3aWxsIHNlbmQgdGhlIFJUTVAgdG8uXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgc3RhcnRCcm9hZGNhc3QocnRtcEVuZHBvaW50OiBzdHJpbmcpOiB2b2lkIHt9XG5cbn1cbiJdfQ==