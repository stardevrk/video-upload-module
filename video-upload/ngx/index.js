import { __decorate, __extends } from "tslib";
/**
 * This is a template for new plugin wrappers
 *
 * TODO:
 * - Add/Change information below
 * - Document usage (importing, executing main functionality)
 * - Remove any imports that you are not using
 * - Remove all the comments included in this template, EXCEPT the @Plugin wrapper docs and any other docs you added
 * - Remove this note
 *
 */
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var VideoUpload = /** @class */ (function (_super) {
    __extends(VideoUpload, _super);
    function VideoUpload() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoUpload.prototype.init = function (uploadOptions) { return cordova(this, "init", { "sync": true }, arguments); };
    VideoUpload.prototype.startUpload = function (pluginType) { return cordova(this, "startUpload", {}, arguments); };
    VideoUpload.prototype.initLive = function (options) { return cordova(this, "initLive", { "sync": true }, arguments); };
    VideoUpload.prototype.startBroadcast = function (rtmpEndpoint) { return cordova(this, "startBroadcast", { "sync": true }, arguments); };
    VideoUpload.prototype.subscribeCaptured = function () { return cordova(this, "subscribeCaptured", { "eventObservable": true, "event": "captured", "element": "document" }, arguments); };
    VideoUpload.pluginName = "VideoUpload";
    VideoUpload.plugin = "https://github.com/stardevrk/cordova-plugin-video-upload-aws.git";
    VideoUpload.pluginRef = "VideoUpload";
    VideoUpload.repo = "https://github.com/stardevrk/cordova-plugin-video-upload-aws";
    VideoUpload.platforms = ["iOS"];
    VideoUpload = __decorate([
        Injectable()
    ], VideoUpload);
    return VideoUpload;
}(IonicNativePlugin));
export { VideoUpload };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3ZpZGVvLXVwbG9hZC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7O0dBVUc7QUFDSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQTBGLE1BQU0sb0JBQW9CLENBQUM7QUFDNUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFzRUQsK0JBQWlCOzs7O0lBT2hELDBCQUFJLGFBQUMsYUFBNEI7SUFRakMsaUNBQVcsYUFBQyxVQUFrQjtJQVM5Qiw4QkFBUSxhQUFDLE9BQW9CO0lBTzdCLG9DQUFjLGFBQUMsWUFBb0I7SUFXbkMsdUNBQWlCOzs7Ozs7SUExQ04sV0FBVztRQUR2QixVQUFVLEVBQUU7T0FDQSxXQUFXO3NCQW5GeEI7RUFtRmlDLGlCQUFpQjtTQUFyQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGlzIGEgdGVtcGxhdGUgZm9yIG5ldyBwbHVnaW4gd3JhcHBlcnNcbiAqXG4gKiBUT0RPOlxuICogLSBBZGQvQ2hhbmdlIGluZm9ybWF0aW9uIGJlbG93XG4gKiAtIERvY3VtZW50IHVzYWdlIChpbXBvcnRpbmcsIGV4ZWN1dGluZyBtYWluIGZ1bmN0aW9uYWxpdHkpXG4gKiAtIFJlbW92ZSBhbnkgaW1wb3J0cyB0aGF0IHlvdSBhcmUgbm90IHVzaW5nXG4gKiAtIFJlbW92ZSBhbGwgdGhlIGNvbW1lbnRzIGluY2x1ZGVkIGluIHRoaXMgdGVtcGxhdGUsIEVYQ0VQVCB0aGUgQFBsdWdpbiB3cmFwcGVyIGRvY3MgYW5kIGFueSBvdGhlciBkb2NzIHlvdSBhZGRlZFxuICogLSBSZW1vdmUgdGhpcyBub3RlXG4gKlxuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIENvcmRvdmFQcm9wZXJ0eSwgQ29yZG92YUluc3RhbmNlLCBJbnN0YW5jZVByb3BlcnR5LCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgdGhlIHZpZGVvIHJlY29yZGluZyAmIHVwbG9hZCBmZWF0dXJlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVwbG9hZE9wdGlvbnMge1xuICAvKipcbiAgICogQVdTIENvZ25pdG8gUG9vbCBJRFxuICAgKi9cbiAgcG9vbElEOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBBV1MgYnVja2V0IGFuZCBjb2duaXRvIHBvb2wgaWQgcmVnaW9uLiB0aGV5IHNob3VsZCBiZSBzYW1lLlxuICAgKi9cbiAgcmVnaW9uOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBBV1MgYnVja2V0IG5hbWUgd2hlcmUgdmlkZW8gaXMgdXBsb2FkZWQgdG8uXG4gICAqL1xuICBidWNrZXQ6IHN0cmluZyxcbiAgLyoqXG4gICAqIEZvbGRlciBuYW1lIGluIHRoZSBBV1MgYnVja2V0LlxuICAgKi9cbiAgZm9sZGVyOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBjYW1lcmEgcHJldmlldyBvcHRpb25zIC0gd2lkdGgsIGhlaWdodC5cbiAgICovXG4gIGNhbWVyYVdpZHRoOiBudW1iZXIsXG4gIGNhbWVyYUhlaWdodDogbnVtYmVyXG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgdGhlIGxpdmUgc3RyZWFtXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGl2ZU9wdGlvbnMge1xuICAvKipcbiAgICogY2FtZXJhIHByZXZpZXcgb3B0aW9ucyAtIHdpZHRoLCBoZWlnaHQuXG4gICAqL1xuICBjYW1lcmFXaWR0aDogbnVtYmVyLFxuICBjYW1lcmFIZWlnaHQ6IG51bWJlclxufVxuXG4vKipcbiAqIEBuYW1lIFZpZGVvIFVwbG9hZFxuICogQGRlc2NyaXB0aW9uXG4gKiBBIENvcmRvdmEgcGx1Z2luIHRoYXQgc2ltcGx5IGFsbG93cyB5b3UgdG8gcmVjb3JkIGFuZCB1cGxvYWQgYSB2aWRlbyB0byB5b3VyIEFXUyBidWNrZXQuXG4gKiBBbmQgdGhpcyBwbHVnaW4gd29ya3MgYXMgYSBsaXZlIHN0cmVhbSBicm9hZGNhc3RlciB0byB5b3VyIHJ0bXAgZW5kIHBvaW50LlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVmlkZW9VcGxvYWQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3ZpZGVvLXVwbG9hZCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlkZW9VcGxvYWQ6IFZpZGVvVXBsb2FkKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy52aWRlb1VwbG9hZC5mdW5jdGlvbk5hbWUoJ0hlbGxvJywgMTIzKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1ZpZGVvVXBsb2FkJyxcbiAgcGx1Z2luOiAnaHR0cHM6Ly9naXRodWIuY29tL3N0YXJkZXZyay9jb3Jkb3ZhLXBsdWdpbi12aWRlby11cGxvYWQtYXdzLmdpdCcsIC8vIG5wbSBwYWNrYWdlIG5hbWUsIGV4YW1wbGU6IGNvcmRvdmEtcGx1Z2luLWNhbWVyYVxuICBwbHVnaW5SZWY6ICdWaWRlb1VwbG9hZCcsIC8vIHRoZSB2YXJpYWJsZSByZWZlcmVuY2UgdG8gY2FsbCB0aGUgcGx1Z2luLCBleGFtcGxlOiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb25cbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9zdGFyZGV2cmsvY29yZG92YS1wbHVnaW4tdmlkZW8tdXBsb2FkLWF3cycsIC8vIHRoZSBnaXRodWIgcmVwb3NpdG9yeSBVUkwgZm9yIHRoZSBwbHVnaW5cbiAgcGxhdGZvcm1zOiBbJ2lPUyddIC8vIEFycmF5IG9mIHBsYXRmb3JtcyBzdXBwb3J0ZWQsIGV4YW1wbGU6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBWaWRlb1VwbG9hZCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgcGx1Z2luIHdpdGggdGhlIHVwbG9hZCBmZWF0dXJlXG4gICAqIEBwYXJhbSB1cGxvYWRPcHRpb25zIHtVcGxvYWRPcHRpb25zfSBWaWRlbyBVcGxvYWQgUGx1Z2luIGZlYXR1cmUgc2V0dGluZyBvcHRpb25zLiBBbGwgYXJlIHJlcXVpcmVkLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIGluaXQodXBsb2FkT3B0aW9uczogVXBsb2FkT3B0aW9ucyk6IHZvaWQge31cblxuICAvKipcbiAgICogU3RhcnQgdGhlIHZpZGVvIHVwbG9hZCBwbHVnaW5cbiAgICogQHBhcmFtIHBsdWdpblR5cGUge3N0cmluZ30gVmlkZW8gVXBsb2FkIFBsdWdpbiBmZWF0dXJlIHNldHRpbmcgb3B0aW9ucy4gQWxsIGFyZSByZXF1aXJlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhcnRVcGxvYWQocGx1Z2luVHlwZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIGxpdmUgc3RyZWFtIHBsdWdpblxuICAgKiBAcGFyYW0gb3B0aW9ucyB7TGl2ZU9wdGlvbnN9IGxpdmUgc3RyZWFtIGJyb2FkY2FzdGVyIGZlYXR1cmUgY2FtZXJhIHByZXZpZXcgb3B0aW9ucy4gQWxsIGFyZSByZXF1aXJlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICBpbml0TGl2ZShvcHRpb25zOiBMaXZlT3B0aW9ucyk6IHZvaWQge31cblxuICAvKipcbiAgICogU3RhcnQgbGl2ZSBzdHJlYW0gcGx1Z2luXG4gICAqIEBwYXJhbSBydG1wRW5kcG9pbnQge3N0cmluZ30gbGl2ZSBzdHJlYW0gZW5kcG9pbnQgdGhhdCB5b3Ugd2lsbCBzZW5kIHRoZSBSVE1QIHRvLlxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHN0YXJ0QnJvYWRjYXN0KHJ0bXBFbmRwb2ludDogc3RyaW5nKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBHZXQgbm90aWZpZWQgd2hlbiB0aGUgc2NyZWVuIGlzIGNhcHR1cmVkXG4gICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBldmVudE9ic2VydmFibGU6IHRydWUsXG4gICAgZXZlbnQ6ICdjYXB0dXJlZCcsXG4gICAgZWxlbWVudDogZG9jdW1lbnQsXG4gIH0pXG4gIHN1YnNjcmliZUNhcHR1cmVkKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn1cbiJdfQ==